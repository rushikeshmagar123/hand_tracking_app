namespace mediapipe {

class HandTrackingCalculator : public CalculatorBase {
 public:
  HandTrackingCalculator() {}
  static ::mediapipe::Status GetContract(CalculatorContract* cc) {
    // Input video stream
    cc->Inputs().Tag("INPUT_VIDEO").Set<ImageFrame>();

    // Output video stream with hand landmarks
    cc->Outputs().Tag("OUTPUT_VIDEO").Set<ImageFrame>();

    return ::mediapipe::OkStatus();
  }

  ::mediapipe::Status Open(CalculatorContext* cc) override {
    options_ = cc->Options<::mediapipe::HandTrackingCalculatorOptions>();
    return ::mediapipe::OkStatus();
  }

  ::mediapipe::Status Process(CalculatorContext* cc) override {
    const ImageFrame& input_frame = cc->Inputs().Tag("INPUT_VIDEO").Get<ImageFrame>();

    // Process input_frame using MediaPipe Hand Tracking
    // ...

    // Create an output ImageFrame with hand landmarks drawn
    cv::Mat output_mat;
    // Draw hand landmarks on output_mat
    // ...

    auto output_frame = absl::make_unique<ImageFrame>(
        ImageFormat::SRGB, output_mat.cols, output_mat.rows,
        ImageFrame::kDefaultAlignmentBoundary);
    cv::Mat output_frame_mat = formats::MatView(output_frame.get());
    output_mat.copyTo(output_frame_mat);

    cc->Outputs().Tag("OUTPUT_VIDEO").Add(output_frame.release(), cc->InputTimestamp());

    return ::mediapipe::OkStatus();
  }

 private:
  ::mediapipe::HandTrackingCalculatorOptions options_;
};

REGISTER_CALCULATOR(HandTrackingCalculator);

}  // namespace mediapipe
